server.port=8100

logging.file.path=./logs

management.endpointsweb.exposure.include = logs

spring.kafka.bootstrap-servers=${KAFKA_BOOTSTRAP_ADDRESS:localhost:29092}
spring.kafka.consumer.group-id=generic-player
# spring.kafka.consumer.key-deserializer=org.springframework.kafka.support.serializer.ErrorHandlingDeserializer
# spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.ErrorHandlingDeserializer
# spring.kafka.consumer.properties.[spring.deserializer.value.delegate.class]=org.apache.kafka.common.serialization.ByteArrayDeserializer
# spring.kafka.consumer.properties.[spring.deserializer.key.delegate.class]=org.apache.kafka.common.serialization.StringDeserializer
# spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
# spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer
# spring.kafka.consumer.isolation-level=read_committed



spring.endpoints.logfile.enabled=true
spring.endpoints.actuator.enabled=true

# Default is of course 1; use >1 if you want to test your own player implementation to "play against itself"
dungeon.playerNumber=1
# "Martina Musterfrau" - if undefined, or multiple players, a random name will be chosen
dungeon.playerName=
# "martina@musterfrau.de" - if undefined, or multiple players, a random name will be chosen
dungeon.playerEmail=
dungeon.services.game=${GAME_SERVICE:http://localhost:8080}

